{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","rating","genres","className","src","alt","map","genre","index","key","class","slice","App","props","state","isLoading","movies","axios","get","data","console","log","this","setState","getMovies","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"uSAwCeA,MArCf,YAAgE,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OACpD,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,gBAAgBC,IAAKJ,EAAQK,IAAKP,EAAOA,MAAOA,IAC/D,yBAAKK,UAAU,eACb,wBAAIA,UAAU,sBACXL,EADH,KACW,0BAAMK,UAAU,qBAAqBN,IAEhD,wBAAIM,UAAU,uBACXD,EAAOI,KAAI,SAACC,EAAOC,GAGlB,OACE,wBAAIC,IAAKD,EAAOL,UAAU,8BACvBI,OAKT,uBAAGJ,UAAU,uBACX,uBAAGO,MAAM,gBADX,OACoCT,GAEpC,uBAAGE,UAAU,wBAAwBJ,EAAQY,MAAM,EAAG,KAAtD,UCgDOC,G,kBAlEb,WAAYC,GAAQ,IAAD,8BAEjB,4CAAMA,KAEDC,MAAQ,CACXC,WAAW,EACXC,OAAQ,IANO,E,2MAcPC,IAAMC,IAAI,4D,gBAFTF,E,EADTG,KACEA,KAAOH,OAKXI,QAAQC,IAAIL,GACZM,KAAKC,SAAS,CAACP,OAAQA,EAAQD,WAAW,I,gJAG1CK,QAAQC,IAAI,wBAAyB,qBACrCC,KAAKE,c,2CAGLJ,QAAQC,IAAI,yBAA0B,uB,+BAGtCD,QAAQC,IAAI,aAAc,oBADnB,MAEqBC,KAAKR,MAA1BC,EAFA,EAEAA,UAAWC,EAFX,EAEWA,OAElB,OADAI,QAAQC,IAAI,eAAgBN,GAE1B,6BAASZ,UAAU,aAChBY,EACC,yBAAKZ,UAAU,UACb,yBAAKA,UAAU,oBAGjB,yBAAKA,UAAU,UACZa,EAAOV,KAAI,SAAAmB,GAEV,OADAL,QAAQC,IAAII,GAEV,kBAAC,EAAD,CAEE5B,KAAM4B,EAAM5B,KACZC,MAAO2B,EAAM3B,MACbC,QAAS0B,EAAM1B,QACfC,OAAQyB,EAAMC,mBACdzB,OAAQwB,EAAMxB,OACdC,OAAQuB,EAAMvB,kB,GAlDdyB,IAAMC,YCFxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7b120299.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Movie({year, title, summary, poster, rating, genres}) {\n  return (\n    <div className='movie'>\n      <img className='movie__poster' src={poster} alt={title} title={title} />\n      <div className='movie__data'>\n        <h1 className='movie__data__title'>\n          {title}, <span className='movie__data__year'>{year}</span>\n        </h1>\n        <ul className='movie__data__genres'>\n          {genres.map((genre, index) => {\n            // 인덱스(또는 key)가 있는 구조의 경우 아이템에 고유한 키값을 명시해주어야 에러가 안생긴다. (렌더링은 안된다.)\n            // class명은 직속 자식에게만 자기 클래스명에 더블 언더바(__)로 이어 작성해주면 된다. (ul.movie__data__genres, li.genres__genre)\n            return (\n              <li key={index} className='movie__data__genres__genre'>\n                {genre}\n              </li>\n            );\n          })}\n        </ul>\n        <p className='movie__data__rating'>\n          <i class='fas fa-star'></i>&nbsp;{rating}\n        </p>\n        <p className='movie__data__summary'>{summary.slice(0, 140)}...</p>\n      </div>\n    </div>\n  );\n}\n\nMovie.propTypes = {\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  rating: PropTypes.number.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Movie;\n","import React from 'react';\nimport axios from 'axios';\nimport Movie from './Movie.js';\nimport './App.css';\n\n// Class Component\nclass App extends React.Component {\n  constructor(props) {\n    // Inherited from parent class explicitly\n    super(props);\n    // Insert data what you gonna deal with\n    this.state = {\n      isLoading: true,\n      movies: [],\n    };\n  }\n  async getMovies() {\n    const {\n      data: {\n        data: {movies},\n      },\n    } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n    // 즉시 실행되는 함수가 아니라 내부에 실행이 완료되기까지 딜레이가 필요한 명령이 있는 함수의 경우, async 키워드로 비동기 함수임을 명시\n    // axios.get(...)은 완료되기까지 시간이 필요한 명령이기 때문에 await 키워드로 기다림을 표시함\n    console.log(movies);\n    this.setState({movies: movies, isLoading: false});\n  }\n  componentDidMount() {\n    console.log('componentDidMount(): ', 'Component mounted');\n    this.getMovies();\n  }\n  componentDidUpdate() {\n    console.log('componentDidUpdate(): ', 'Component updated');\n  }\n  render() {\n    console.log('render(): ', 'Rendering now...');\n    const {isLoading, movies} = this.state;\n    console.log('On loading: ', isLoading);\n    return (\n      <section className='container'>\n        {isLoading ? (\n          <div className='loader'>\n            <div className='loader__object'></div>\n          </div>\n        ) : (\n          <div className='movies'>\n            {movies.map(movie => {\n              console.log(movie);\n              return (\n                <Movie\n                  // id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster={movie.medium_cover_image}\n                  rating={movie.rating}\n                  genres={movie.genres}\n                />\n              );\n            })}\n          </div>\n        )}\n      </section>\n      // <div>\n      //   <h1>I am a class component</h1>\n      //   <p>The number is {this.state.count}</p>\n      //   <button onClick={this.add}>PLUS {String.fromCharCode(43)}</button>\n      //   <button onClick={this.minus}>MINUS {String.fromCharCode(8722)}</button>\n      // </div>\n    );\n  }\n}\n\nexport default App;\n\n/*\nfunction Movie({genre}) {\n  return <p>Genre : {genre}</p>;\n}\n\nfunction Food(props) {\n  return <p>Name : {props.name}</p>;\n}\n\nfunction Spec(props) {\n  // props === { lang, img }\n  // props는 Component 즉, <CompName key1=\"value\" key2=\"value\"... />에 작성된 key-value들로 구성된 객체\n  console.log(props);\n  return (\n    // 항상 단일 태그는 \"/>\"로 마무리 해주세요. ( <img> => <img/> )\n    <div>\n      <img src={props.img.src} alt={props.img.alt} width={props.img.width} />\n      <h3>Spec : {props.lang}</h3>\n    </div>\n  );\n}\n\nfunction renderSpecs(skill) {\n  return <Spec lang={skill.lang} img={skill.img} />;\n}\n\nlet skills = [\n  {\n    id: 1,\n    lang: 'JS/ES6+',\n    img: {\n      src: 'https://source.unsplash.com/random',\n      alt: 'skill',\n      width: '160px',\n    },\n    rating: 3.5,\n  },\n  {\n    id: 2,\n    lang: 'HTML5/PUG',\n    img: {\n      src: 'https://source.unsplash.com/random',\n      alt: 'skill',\n      width: '160px',\n    },\n    rating: 4.0,\n  },\n  {\n    id: 3,\n    lang: 'CSS3/SCSS',\n    img: {\n      src: 'https://source.unsplash.com/random',\n      alt: 'skill',\n      width: '160px',\n    },\n    rating: 4.5,\n  },\n  {\n    id: 4,\n    lang: 'REACT.JS',\n    img: {\n      src: 'https://source.unsplash.com/random',\n      alt: 'skill',\n      width: '160px',\n    },\n    rating: 3,\n  },\n  {\n    id: 5,\n    lang: 'NODE.JS',\n    img: {\n      src: 'https://source.unsplash.com/random',\n      alt: 'skill',\n      width: '160px',\n    },\n    rating: 2,\n  },\n];\n*/\n\n/*\n  add = () => {\n    console.log('plus');\n    // only read initial values first time and mutates the value in other variable\n    this.setState(current => ({count: current.count + 1}));\n  };\n  minus = () => {\n    console.log('minus');\n    this.setState(current => ({count: current.count - 1}));\n  };\n  componentWillMount() {\n    console.log('componentWillMount(): ', 'Component will be mounted');\n  }\n  componentWillUpdate() {\n    console.log('componentWillUpdate(): ', 'Component will be updated');\n  }\n  componentWillUnmount() {\n    console.log('componentWillUnmount(): ', 'Component unmounted');\n  }\n*/\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}